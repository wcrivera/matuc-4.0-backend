// src/routes/capitulo.routes.ts
// ==========================================
// üõ§Ô∏è RUTAS DE CAP√çTULOS - MATUC v4.0
// ==========================================

import { Router } from 'express';
import { body, param, query } from 'express-validator';
import { validarCampos } from '../middlewares/validation.middleware';
import { verifyJWT } from '../middlewares/auth.middleware';
import { tienePermiso, esProfesor, puedeEditar } from '../middlewares/permissions.middleware';

// Importar controladores (los crearemos despu√©s)
import {
    obtenerCapitulosPorCurso,
    obtenerCapituloPorId,
    crearCapitulo,
    actualizarCapitulo,
    eliminarCapitulo,
    agregarTema,
    actualizarTema,
    eliminarTema,
    agregarContenido,
    actualizarContenido,
    eliminarContenido,
    habilitarContenidoParaGrupo
} from '../controllers/capitulo.controller';

const router = Router();

// ==========================================
// üîê TODAS LAS RUTAS REQUIEREN AUTENTICACI√ìN
// ==========================================

router.use(verifyJWT);

// ==========================================
// üìñ VALIDACIONES REUTILIZABLES
// ==========================================

const validarCursoId = [
    param('cursoId')
        .isMongoId()
        .withMessage('ID de curso inv√°lido'),
    validarCampos
];

const validarCapituloId = [
    param('capituloId')
        .isMongoId()
        .withMessage('ID de cap√≠tulo inv√°lido'),
    validarCampos
];

const validarTemaId = [
    param('temaId')
        .isMongoId()
        .withMessage('ID de tema inv√°lido'),
    validarCampos
];

const validarContenidoId = [
    param('contenidoId')
        .isMongoId()
        .withMessage('ID de contenido inv√°lido'),
    validarCampos
];

// ==========================================
// üìö RUTAS DE CAP√çTULOS
// ==========================================

/**
 * GET /api/capitulos/curso/:cursoId
 * Obtener todos los cap√≠tulos de un curso
 * Acceso: Cualquier usuario autenticado con acceso al curso
 */
router.get('/curso/:cursoId',
    validarCursoId,
    obtenerCapitulosPorCurso
);

/**
 * GET /api/capitulos/:capituloId
 * Obtener un cap√≠tulo espec√≠fico por ID
 * Acceso: Cualquier usuario autenticado con acceso al curso
 */
router.get('/:capituloId',
    validarCapituloId,
    obtenerCapituloPorId
);

/**
 * POST /api/capitulos
 * Crear un nuevo cap√≠tulo
 * Body: { cid, titulo, descripcion, orden, visible?, objetivos? }
 * Acceso: Solo Profesor Editor y Admin
 */
router.post('/',
    [
        body('cid')
            .isMongoId()
            .withMessage('ID de curso inv√°lido'),
        body('titulo')
            .trim()
            .notEmpty()
            .withMessage('El t√≠tulo es obligatorio')
            .isLength({ min: 3, max: 200 })
            .withMessage('El t√≠tulo debe tener entre 3 y 200 caracteres'),
        body('descripcion')
            .trim()
            .notEmpty()
            .withMessage('La descripci√≥n es obligatoria')
            .isLength({ min: 10, max: 2000 })
            .withMessage('La descripci√≥n debe tener entre 10 y 2000 caracteres'),
        body('orden')
            .isInt({ min: 1 })
            .withMessage('El orden debe ser un n√∫mero positivo'),
        body('visible')
            .optional()
            .isBoolean()
            .withMessage('Visible debe ser un booleano'),
        body('objetivos')
            .optional()
            .isArray()
            .withMessage('Los objetivos deben ser un array'),
        body('objetivos.*')
            .optional()
            .trim()
            .notEmpty()
            .withMessage('Los objetivos no pueden estar vac√≠os')
            .isLength({ max: 500 })
            .withMessage('Cada objetivo no puede exceder 500 caracteres'),
        validarCampos
    ],
    puedeEditar,
    crearCapitulo
);

/**
 * PUT /api/capitulos/:capituloId
 * Actualizar un cap√≠tulo completo
 * Body: { titulo?, descripcion?, orden?, visible?, objetivos? }
 * Acceso: Solo Profesor Editor y Admin
 */
router.put('/:capituloId',
    [
        ...validarCapituloId,
        body('titulo')
            .optional()
            .trim()
            .isLength({ min: 3, max: 200 })
            .withMessage('El t√≠tulo debe tener entre 3 y 200 caracteres'),
        body('descripcion')
            .optional()
            .trim()
            .isLength({ min: 10, max: 2000 })
            .withMessage('La descripci√≥n debe tener entre 10 y 2000 caracteres'),
        body('orden')
            .optional()
            .isInt({ min: 1 })
            .withMessage('El orden debe ser un n√∫mero positivo'),
        body('visible')
            .optional()
            .isBoolean()
            .withMessage('Visible debe ser un booleano'),
        body('objetivos')
            .optional()
            .isArray()
            .withMessage('Los objetivos deben ser un array'),
        validarCampos
    ],
    puedeEditar,
    actualizarCapitulo
);

/**
 * DELETE /api/capitulos/:capituloId
 * Eliminar un cap√≠tulo
 * Acceso: Solo Profesor Editor y Admin
 */
router.delete('/:capituloId',
    validarCapituloId,
    puedeEditar,
    eliminarCapitulo
);

// ==========================================
// üìù RUTAS DE TEMAS
// ==========================================

/**
 * POST /api/capitulos/:capituloId/temas
 * Agregar un tema a un cap√≠tulo
 * Body: { titulo, descripcion, orden, tipo, estimacionMinutos }
 * Acceso: Solo Profesor Editor y Admin
 */
router.post('/:capituloId/temas',
    [
        ...validarCapituloId,
        body('titulo')
            .trim()
            .notEmpty()
            .withMessage('El t√≠tulo es obligatorio')
            .isLength({ min: 3, max: 200 })
            .withMessage('El t√≠tulo debe tener entre 3 y 200 caracteres'),
        body('descripcion')
            .trim()
            .notEmpty()
            .withMessage('La descripci√≥n es obligatoria')
            .isLength({ min: 10, max: 1000 })
            .withMessage('La descripci√≥n debe tener entre 10 y 1000 caracteres'),
        body('orden')
            .isInt({ min: 1 })
            .withMessage('El orden debe ser un n√∫mero positivo'),
        body('tipo')
            .isIn(['teorico', 'practico', 'evaluativo', 'mixto'])
            .withMessage('Tipo de tema inv√°lido'),
        body('estimacionMinutos')
            .isInt({ min: 1, max: 999 })
            .withMessage('La estimaci√≥n debe estar entre 1 y 999 minutos'),
        validarCampos
    ],
    puedeEditar,
    agregarTema
);

/**
 * PUT /api/capitulos/:capituloId/temas/:temaId
 * Actualizar un tema
 * Body: { titulo?, descripcion?, orden?, tipo?, estimacionMinutos?, visible? }
 * Acceso: Solo Profesor Editor y Admin
 */
router.put('/:capituloId/temas/:temaId',
    [
        ...validarCapituloId,
        ...validarTemaId,
        body('titulo')
            .optional()
            .trim()
            .isLength({ min: 3, max: 200 })
            .withMessage('El t√≠tulo debe tener entre 3 y 200 caracteres'),
        body('descripcion')
            .optional()
            .trim()
            .isLength({ min: 10, max: 1000 })
            .withMessage('La descripci√≥n debe tener entre 10 y 1000 caracteres'),
        body('orden')
            .optional()
            .isInt({ min: 1 })
            .withMessage('El orden debe ser un n√∫mero positivo'),
        body('tipo')
            .optional()
            .isIn(['teorico', 'practico', 'evaluativo', 'mixto'])
            .withMessage('Tipo de tema inv√°lido'),
        body('estimacionMinutos')
            .optional()
            .isInt({ min: 1, max: 999 })
            .withMessage('La estimaci√≥n debe estar entre 1 y 999 minutos'),
        body('visible')
            .optional()
            .isBoolean()
            .withMessage('Visible debe ser un booleano'),
        validarCampos
    ],
    puedeEditar,
    actualizarTema
);

/**
 * DELETE /api/capitulos/:capituloId/temas/:temaId
 * Eliminar un tema
 * Acceso: Solo Profesor Editor y Admin
 */
router.delete('/:capituloId/temas/:temaId',
    [
        ...validarCapituloId,
        ...validarTemaId
    ],
    puedeEditar,
    eliminarTema
);

// ==========================================
// üìÑ RUTAS DE CONTENIDOS
// ==========================================

/**
 * POST /api/capitulos/:capituloId/temas/:temaId/contenidos
 * Agregar un contenido a un tema
 * Body: { titulo, tipo, contenido, orden, visible?, obligatorio?, completable? }
 * Acceso: Solo Profesor Editor y Admin
 */
router.post('/:capituloId/temas/:temaId/contenidos',
    [
        ...validarCapituloId,
        ...validarTemaId,
        body('titulo')
            .trim()
            .notEmpty()
            .withMessage('El t√≠tulo es obligatorio')
            .isLength({ max: 200 })
            .withMessage('El t√≠tulo no puede exceder 200 caracteres'),
        body('tipo')
            .isIn(['teoria', 'ejemplo', 'ejercicio', 'video', 'latex', 'simulacion'])
            .withMessage('Tipo de contenido inv√°lido'),
        body('contenido')
            .trim()
            .notEmpty()
            .withMessage('El contenido es obligatorio'),
        body('orden')
            .isInt({ min: 1 })
            .withMessage('El orden debe ser un n√∫mero positivo'),
        body('visible')
            .optional()
            .isBoolean()
            .withMessage('Visible debe ser un booleano'),
        body('obligatorio')
            .optional()
            .isBoolean()
            .withMessage('Obligatorio debe ser un booleano'),
        body('completable')
            .optional()
            .isBoolean()
            .withMessage('Completable debe ser un booleano'),
        validarCampos
    ],
    puedeEditar,
    agregarContenido
);

/**
 * PUT /api/capitulos/:capituloId/temas/:temaId/contenidos/:contenidoId
 * Actualizar un contenido
 * Body: { titulo?, tipo?, contenido?, orden?, visible?, obligatorio?, completable? }
 * Acceso: Solo Profesor Editor y Admin
 */
router.put('/:capituloId/temas/:temaId/contenidos/:contenidoId',
    [
        ...validarCapituloId,
        ...validarTemaId,
        ...validarContenidoId,
        body('titulo')
            .optional()
            .trim()
            .isLength({ max: 200 })
            .withMessage('El t√≠tulo no puede exceder 200 caracteres'),
        body('tipo')
            .optional()
            .isIn(['teoria', 'ejemplo', 'ejercicio', 'video', 'latex', 'simulacion'])
            .withMessage('Tipo de contenido inv√°lido'),
        body('contenido')
            .optional()
            .trim()
            .notEmpty()
            .withMessage('El contenido no puede estar vac√≠o'),
        body('orden')
            .optional()
            .isInt({ min: 1 })
            .withMessage('El orden debe ser un n√∫mero positivo'),
        validarCampos
    ],
    puedeEditar,
    actualizarContenido
);

/**
 * DELETE /api/capitulos/:capituloId/temas/:temaId/contenidos/:contenidoId
 * Eliminar un contenido
 * Acceso: Solo Profesor Editor y Admin
 */
router.delete('/:capituloId/temas/:temaId/contenidos/:contenidoId',
    [
        ...validarCapituloId,
        ...validarTemaId,
        ...validarContenidoId
    ],
    puedeEditar,
    eliminarContenido
);

// ==========================================
// üîê RUTAS DE HABILITACI√ìN (PROFESORES)
// ==========================================

/**
 * POST /api/capitulos/:capituloId/contenidos/:contenidoId/habilitar
 * Habilitar/deshabilitar contenido para un grupo
 * Body: { grupoId, habilitado, notas? }
 * Acceso: Profesor, Profesor Editor y Admin
 */
router.post('/:capituloId/contenidos/:contenidoId/habilitar',
    [
        ...validarCapituloId,
        ...validarContenidoId,
        body('grupoId')
            .isMongoId()
            .withMessage('ID de grupo inv√°lido'),
        body('habilitado')
            .isBoolean()
            .withMessage('Habilitado debe ser un booleano'),
        body('notas')
            .optional()
            .trim()
            .isLength({ max: 500 })
            .withMessage('Las notas no pueden exceder 500 caracteres'),
        validarCampos
    ],
    esProfesor,  // Profesores pueden habilitar/deshabilitar
    habilitarContenidoParaGrupo
);

// ==========================================
// üì§ EXPORTAR ROUTER
// ==========================================

export default router;