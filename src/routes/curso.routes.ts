import { Router } from 'express';
import { check } from 'express-validator';
import { validarCampos } from '../middlewares/validation.middleware';
import { verifyJWT } from '../helpers/jwt';
import {
    obtenerCursos,
    obtenerCursoPorId,
    crearCurso,
    actualizarCurso,
    eliminarCurso,
    obtenerEstadisticasCursos,
    seedCursos
} from '../controllers/curso.controller';

// ==========================================
// üõ§Ô∏è ROUTER DE CURSOS
// ==========================================

const router = Router();

// ==========================================
// üìã VALIDACIONES REUTILIZABLES
// ==========================================

// Validaciones para crear curso
const validacionesCrearCurso = [
    check('sigla')
        .notEmpty()
        .withMessage('La sigla es obligatoria')
        .isLength({ min: 3, max: 10 })
        .withMessage('La sigla debe tener entre 3 y 10 caracteres')
        .matches(/^[A-Z]{3,4}[0-9]{3,4}$/)
        .withMessage('Formato de sigla inv√°lido (ej: MAT1610)'),

    check('nombre')
        .notEmpty()
        .withMessage('El nombre es obligatorio')
        .isLength({ min: 5, max: 100 })
        .withMessage('El nombre debe tener entre 5 y 100 caracteres'),

    check('descripcion')
        .notEmpty()
        .withMessage('La descripci√≥n es obligatoria')
        .isLength({ min: 20, max: 500 })
        .withMessage('La descripci√≥n debe tener entre 20 y 500 caracteres'),

    check('categoria')
        .notEmpty()
        .withMessage('La categor√≠a es obligatoria')
        .isIn(['C√°lculo', '√Ålgebra', 'Estad√≠stica', 'Geometr√≠a', 'An√°lisis', 'Matem√°tica Aplicada', 'Otros'])
        .withMessage('Categor√≠a no v√°lida'),

    check('creditos')
        .isInt({ min: 1, max: 12 })
        .withMessage('Los cr√©ditos deben ser un n√∫mero entero entre 1 y 12'),

    check('semestre')
        .matches(/^20[0-9]{2}-[12]$/)
        .withMessage('Formato de semestre inv√°lido (ej: 2024-1)'),

    check('a√±o')
        .isInt({ min: 2020, max: 2030 })
        .withMessage('El a√±o debe estar entre 2020 y 2030'),

    // Validaciones opcionales para configuraci√≥n
    check('configuracion.notaAprobacion')
        .optional()
        .isFloat({ min: 1.0, max: 7.0 })
        .withMessage('La nota de aprobaci√≥n debe estar entre 1.0 y 7.0'),

    check('configuracion.limitePlazas')
        .optional()
        .isInt({ min: 1, max: 500 })
        .withMessage('El l√≠mite de plazas debe ser un n√∫mero entero entre 1 y 500'),

    check('configuracion.requiereAprobacion')
        .optional()
        .isBoolean()
        .withMessage('requiereAprobacion debe ser un booleano'),

    check('configuracion.codigoAcceso')
        .optional()
        .isLength({ min: 4, max: 20 })
        .withMessage('El c√≥digo de acceso debe tener entre 4 y 20 caracteres')
        .matches(/^[A-Za-z0-9]+$/)
        .withMessage('El c√≥digo de acceso solo puede contener letras y n√∫meros'),

    validarCampos
];

// Validaciones para actualizar curso (campos opcionales)
const validacionesActualizarCurso = [
    check('sigla')
        .optional()
        .isLength({ min: 3, max: 10 })
        .withMessage('La sigla debe tener entre 3 y 10 caracteres')
        .matches(/^[A-Z]{3,4}[0-9]{3,4}$/)
        .withMessage('Formato de sigla inv√°lido (ej: MAT1610)'),

    check('nombre')
        .optional()
        .isLength({ min: 5, max: 100 })
        .withMessage('El nombre debe tener entre 5 y 100 caracteres'),

    check('descripcion')
        .optional()
        .isLength({ min: 20, max: 500 })
        .withMessage('La descripci√≥n debe tener entre 20 y 500 caracteres'),

    check('categoria')
        .optional()
        .isIn(['C√°lculo', '√Ålgebra', 'Estad√≠stica', 'Geometr√≠a', 'An√°lisis', 'Matem√°tica Aplicada', 'Otros'])
        .withMessage('Categor√≠a no v√°lida'),

    check('creditos')
        .optional()
        .isInt({ min: 1, max: 12 })
        .withMessage('Los cr√©ditos deben ser un n√∫mero entero entre 1 y 12'),

    check('semestre')
        .optional()
        .matches(/^20[0-9]{2}-[12]$/)
        .withMessage('Formato de semestre inv√°lido (ej: 2024-1)'),

    check('a√±o')
        .optional()
        .isInt({ min: 2020, max: 2030 })
        .withMessage('El a√±o debe estar entre 2020 y 2030'),

    check('activo')
        .optional()
        .isBoolean()
        .withMessage('activo debe ser un booleano'),

    check('publico')
        .optional()
        .isBoolean()
        .withMessage('publico debe ser un booleano'),

    // Validaciones opcionales para configuraci√≥n en actualizaci√≥n
    check('configuracion.notaAprobacion')
        .optional()
        .isFloat({ min: 1.0, max: 7.0 })
        .withMessage('La nota de aprobaci√≥n debe estar entre 1.0 y 7.0'),

    check('configuracion.limitePlazas')
        .optional()
        .isInt({ min: 1, max: 500 })
        .withMessage('El l√≠mite de plazas debe ser un n√∫mero entero entre 1 y 500'),

    check('configuracion.requiereAprobacion')
        .optional()
        .isBoolean()
        .withMessage('requiereAprobacion debe ser un booleano'),

    check('configuracion.codigoAcceso')
        .optional()
        .isLength({ min: 4, max: 20 })
        .withMessage('El c√≥digo de acceso debe tener entre 4 y 20 caracteres')
        .matches(/^[A-Za-z0-9]+$/)
        .withMessage('El c√≥digo de acceso solo puede contener letras y n√∫meros'),

    validarCampos
];

// Validaci√≥n para par√°metros ID
const validarId = [
    check('id')
        .isMongoId()
        .withMessage('ID de curso inv√°lido'),

    validarCampos
];

// ==========================================
// üåê RUTAS P√öBLICAS (SIN AUTENTICACI√ìN)
// ==========================================

// üîç Obtener cursos p√∫blicos (sin autenticaci√≥n requerida para algunos casos)
// Esta ruta podr√≠a ser √∫til para mostrar cursos p√∫blicos en landing page
router.get('/publicos', obtenerCursos);

// ==========================================
// üîê RUTAS PROTEGIDAS (CON AUTENTICACI√ìN)
// ==========================================

// üìã Obtener todos los cursos (con filtros y paginaci√≥n)
// GET /api/curso?categoria=C√°lculo&activo=true&page=1&limit=10&search=calculo
router.get('/',
    verifyJWT,
    obtenerCursos
);

// üìÑ Obtener curso espec√≠fico por ID
// GET /api/curso/658f56b795ce81274b56d3f2
router.get('/:id',
    verifyJWT,
    validarId,
    obtenerCursoPorId
);

// ‚ûï Crear nuevo curso (solo admin por ahora)
// POST /api/curso
router.post('/',
    verifyJWT,
    validacionesCrearCurso,
    crearCurso
);

// ‚úèÔ∏è Actualizar curso existente (admin y profesor_editor)
// PUT /api/curso/658f56b795ce81274b56d3f2
router.put('/:id',
    verifyJWT,
    validarId,
    validacionesActualizarCurso,
    actualizarCurso
);

// üóëÔ∏è Eliminar curso (solo admin)
// DELETE /api/curso/658f56b795ce81274b56d3f2
router.delete('/:id',
    verifyJWT,
    validarId,
    eliminarCurso
);

// ==========================================
// üìä RUTAS ADMINISTRATIVAS
// ==========================================

// üìà Obtener estad√≠sticas de cursos (solo admin)
// GET /api/curso/admin/stats
router.get('/admin/stats',
    verifyJWT,
    obtenerEstadisticasCursos
);

// ==========================================
// üå± RUTAS DE DESARROLLO
// ==========================================

// üîß Seed de datos (solo desarrollo y admin)
// POST /api/curso/dev/seed
router.post('/dev/seed',
    verifyJWT,
    seedCursos
);

// ==========================================
// üéØ RUTAS ESPEC√çFICAS POR ROL (FUTURAS)
// ==========================================

// TODO: Implementar rutas espec√≠ficas para cada rol

// üë®‚Äçüè´ Rutas para profesores
// GET /api/curso/profesor/mis-cursos - Cursos donde el usuario es profesor
// router.get('/profesor/mis-cursos', verifyJWT, obtenerMisCursos);

// üéì Rutas para estudiantes  
// GET /api/curso/estudiante/matriculados - Cursos donde el usuario est√° matriculado
// router.get('/estudiante/matriculados', verifyJWT, obtenerCursosMatriculados);

// ‚úèÔ∏è Rutas para profesor_editor
// GET /api/curso/editor/editables - Cursos que el usuario puede editar
// router.get('/editor/editables', verifyJWT, obtenerCursosEditables);

// üîÑ Rutas de estado (activar/desactivar, publicar/despublicar)
// PATCH /api/curso/:id/toggle-activo - Cambiar estado activo
// router.patch('/:id/toggle-activo', verifyJWT, validarId, toggleActivo);

// PATCH /api/curso/:id/toggle-publico - Cambiar estado p√∫blico
// router.patch('/:id/toggle-publico', verifyJWT, validarId, togglePublico);

// ==========================================
// üì§ EXPORT ROUTER
// ==========================================

export default router;

// ==========================================
// üìã DOCUMENTACI√ìN DE ENDPOINTS
// ==========================================

/*
üåê ENDPOINTS DISPONIBLES:

P√öBLICOS:
  GET    /api/curso/publicos           - Cursos p√∫blicos (sin auth)

AUTENTICADOS:
  GET    /api/curso                    - Listar cursos (filtros, paginaci√≥n)
  GET    /api/curso/:id                - Obtener curso espec√≠fico
  POST   /api/curso                    - Crear curso (admin)
  PUT    /api/curso/:id                - Actualizar curso (admin/profesor_editor)
  DELETE /api/curso/:id                - Eliminar curso (admin)

ADMINISTRATIVOS:
  GET    /api/curso/admin/stats        - Estad√≠sticas (admin)

DESARROLLO:
  POST   /api/curso/dev/seed           - Seed datos (desarrollo + admin)

üìã PAR√ÅMETROS DE CONSULTA (Query Params):
  ?categoria=C√°lculo                   - Filtrar por categor√≠a
  ?activo=true                         - Filtrar por estado activo
  ?publico=true                        - Filtrar por estado p√∫blico
  ?semestre=2024-1                     - Filtrar por semestre
  ?a√±o=2024                            - Filtrar por a√±o
  ?search=calculo                      - B√∫squeda por texto
  ?page=1                              - P√°gina (paginaci√≥n)
  ?limit=10                            - Elementos por p√°gina

üîê PERMISOS POR ENDPOINT:
  GET (listar):     Todos los roles autenticados
  GET (espec√≠fico): Todos los roles (seg√∫n curso)
  POST (crear):     Admin (TODO: + profesores)
  PUT (editar):     Admin (TODO: + profesor_editor)
  DELETE:           Solo Admin
  Stats:            Solo Admin
  Seed:             Solo Admin + desarrollo

üéØ VALIDACIONES:
  - Todos los campos obligatorios validados
  - Formatos espec√≠ficos (sigla, semestre, etc.)
  - Rangos num√©ricos apropiados
  - ObjectId v√°lidos para par√°metros
  - JWT v√°lido para rutas protegidas
*/